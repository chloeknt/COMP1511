// Assignment 2 21T1 COMP1511: Beats by CSE
// beats.c
//
// This program was written by Chloe Toh (z5362296)
// on 07/04/2021
//
// Version 1.0.0: Assignment released.

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>

// Add any extra #includes your code needs here.

#include "beats.h"

// Add your own #defines here.

typedef struct note *Note;
//////////////////////////////////////////////////////////////////////

// You don't have to use the provided struct track, you are free to
// make your own struct instead.
// If you use the provided struct track, you will have to add fields
// to store other information.

struct track {
    struct beat *curr;
    struct beat *head;
};

// You don't have to use the provided struct beat, you are free to
// make your own struct instead.
// If you use the provided struct beat, you may add fields
// to it to store other information.

struct beat {
    // You may choose to add or change fields in this struct.
    struct note *notes;
    struct beat *next;
};

// You don't have to use the provided struct note, you are free to
// make your own struct instead.
// If you use the provided struct note, you add fields
// to it to store other information.

struct note {
    // You may choose to add or change fields in this struct.
    int octave;
    int key;
    struct note *next;
};

// Add any other structs you define here.

//////////////////////////////////////////////////////////////////////

// Add prototypes for any extra functions you create here.
Note create_note(int octave, int key, Note note);
Note loop_notes(int octave, int key, Note note);
void print_notes(Note note);
int count_notes(Note note, int octave);

Beat add_beat(Beat beat, Note note);
Beat add_new_list_beat(Beat beat, Note note);
void print_beats(Beat beat, Track track);
int count_beats(Beat beat);

void free_notes(Note note);
void free_beats(Beat beat);
Beat remove_beat(Beat beat, Track track, int result);

// Return a malloced Beat with fields initialized.
Beat create_beat(void) {
    Beat new_beat = malloc(sizeof (struct beat));
    assert(new_beat != NULL);

    new_beat->next = NULL;
    new_beat->notes = NULL;

    // You do not need to change this function, unless you change
    // the implementation of struct beat.

    return new_beat;
}

// You need to implement the following functions.
// You can find descriptions of what each function should do in beats.h

//////////////////////////////////////////////////////////////////////
//                        Stage 1 Functions                         //
//////////////////////////////////////////////////////////////////////

// Add a note to the end of a beat.
int add_note_to_beat(Beat beat, int octave, int key) {
    //New note not valid
    //Valid octave (-1 < octave < 10)
    if (octave < 0 || octave >= 10) {
        return INVALID_OCTAVE;
    //Valid key (-1 < key < 12)
    } else if (key < 0 || key >= 12) {
        return INVALID_KEY;
    } else {  
        //Inserting into an empty list, no checks need to be made 
        if (beat->notes == NULL) {
            Note new_note = create_note(octave, key, NULL);
            beat->notes = new_note; 
            return VALID_NOTE;
        //Inserting into a populated list, check the previous node 
        } else {
            Note prev = loop_notes(octave, key, beat->notes);
            if (octave > prev->octave) {
                Note new_note = create_note(octave, key, prev->next);
                prev->next = new_note;
                return VALID_NOTE;
            } else if (octave == prev->octave && key > prev->key) {
                Note new_note = create_note(octave, key, prev->next);
                prev->next = new_note;
                return VALID_NOTE;
            } else {
                return NOT_HIGHEST_NOTE;
            }       
        }
    }
}

// Count the number of notes in a beat that are in a given octave.
int count_notes_in_octave(Beat beat, int octave) {
    int number = count_notes(beat->notes, octave);
    return number;
}

//Count the notes 
int count_notes(Note note, int octave) {
    int number = 0;
    Note curr = note;
    while (curr != NULL) {
        if (octave == curr->octave) {
        number++;
        }
        curr = curr->next;
    }
    return number;
}

// Print the contents of a beat.
void print_beat(Beat beat) {
    print_notes(beat->notes);
    printf("\n");
}

//Print the note nodes
void print_notes(Note note) {
    Note curr = note;
    int first = 0;
    while (curr != NULL) {
        if (first == 0 && curr->key < 10) {
            printf(" %d 0%d ", curr->octave, curr->key);
            first = 1;
        } else if (first == 0 && curr->key >= 10) {
            printf(" %d %d ", curr->octave, curr->key);
            first = 1;
        } else if (first == 1 && curr->key < 10) {
            printf("| %d 0%d ", curr->octave, curr->key);
        } else if (first == 1 && curr->key >= 10){
            printf("| %d %d ", curr->octave, curr->key);
        }
        curr = curr->next;
    }
}

//Allocate memory for a note node
//Populate that node with new_octave, new_key and new_next
//Return a pointer to the allocated memory
Note create_note(int new_octave, int new_key, Note new_next) {
    Note new_note = malloc(sizeof(struct note));
    new_note->next = NULL;
    new_note->octave = new_octave;
    new_note->key = new_key;
    return new_note; 
}

//Loop through the note nodes and find the previous note
//Check that it is a valid note, if so, add a note
Note loop_notes(int octave, int key, Note note) {
    Note prev = note;
    Note curr = note;
    while (curr != NULL) {
        prev = curr;
        curr = curr->next;
    }
    return prev;
 }


//////////////////////////////////////////////////////////////////////
//                        Stage 2 Functions                         //
//////////////////////////////////////////////////////////////////////

// Return a malloced track with fields initialized.
Track create_track(void) {
    Track new_track = malloc(sizeof (struct track));
    new_track->curr = NULL;
    new_track->head = NULL;

    return new_track;
}

// Add a beat after the current beat in a track.
void add_beat_to_track(Track track, Beat beat) {
    //Inserting into an empty list
    if (track->head == NULL) {
        Beat new_beat = add_new_list_beat(track->head, beat->notes);
        track->head = new_beat;
    //Inserting into a populated list with no selected beat
    } else if (track->curr == NULL) {
        Beat new_beat = add_beat(track->head, beat->notes);
        track->head = new_beat;
    //Inserting into a populated list with a selected beat
    } else {
        Beat new_beat = add_beat(track->curr->next, beat->notes);
        (track->curr)->next = new_beat;
    }
}

Beat add_new_list_beat(Beat beat, Note note) {
    Beat new_beat = malloc(sizeof(struct beat));
    new_beat->next = NULL;
    new_beat->notes = note;
    return new_beat;
}

Beat add_beat(Beat next, Note note) {
    Beat new_head_beat = malloc(sizeof(struct beat));
    new_head_beat->next = next; 
    new_head_beat->notes = note;
    return new_head_beat;
}


// Set a track's current beat to the next beat.
int select_next_beat(Track track) {
    // Given a Track, select the Beat in that Track after the
    //currently selected Beat, then return the status of the Track.
    if (track->curr == NULL) {
        track->curr = track->head;
    } else {
        track->curr = (track->curr)->next;
    }
    
    if (track->curr == NULL) {
        return TRACK_STOPPED;
    } else {
        return TRACK_PLAYING;
    }
}


// Print the contents of a track.
void print_track(Track track) {
    if (track->head != NULL) {
        print_beats(track->head, track);
    }
}

void print_beats(Beat beat, Track track) {
    Beat curr = beat;
    int beat_number = 1;
    while (curr != NULL) {
        if (curr == track->curr) {
            printf(">[%d]", beat_number);
            print_notes(curr->notes);
        } else {
            printf(" [%d]", beat_number);
            print_notes(curr->notes);
        }
        beat_number++;
        curr = curr->next;
        printf("\n");
    }
}



// Count beats after the current beat in a track.
int count_beats_left_in_track(Track track) {
    int number_beats = 0;
    if (track->curr == NULL) {
        number_beats = count_beats(track->head);
    } else {
        number_beats = count_beats(track->curr);
        number_beats = number_beats - 1;
    }
    return number_beats;
}

int count_beats(Beat beat) {
    int number_beats = 0;
    Beat curr = beat;
    while (curr != NULL) {
        number_beats++;
        curr = curr->next;
    }
    return number_beats;
}

//////////////////////////////////////////////////////////////////////
//                        Stage 3 Functions                         //
//////////////////////////////////////////////////////////////////////

// Free the memory of a beat, and any memory it points to.
void free_beat(Beat beat) {
    free_notes(beat->notes);
    free(beat);
}

void free_notes(Note note) {
    Note curr = note;
    while (curr != NULL) {
        Note free_note = curr;
        curr = curr->next;
        free(free_note);
    }
}

// Free the memory of a track, and any memory it points to.
void free_track(Track track) {
    free_beats(track->head);
}

void free_beats(Beat beat) {
    Beat curr = beat;
    while (curr != NULL) {
        Beat free_beat = curr;
        curr = curr->next;
        free(free_beat);
    }
}

// Remove the currently selected beat from a track.
int remove_selected_beat(Track track) {
    if (track->curr == NULL) {
        return TRACK_STOPPED;
    } else if (track->head == NULL) {
        return TRACK_STOPPED;
    } else {
        int result = 0;
        Beat removed_beat = remove_beat(track->curr->next, track, result);
        free_beat(removed_beat);
        if (result == 0) {
            return TRACK_PLAYING;
        } else {
            return TRACK_STOPPED;
        }
    }
}

Beat remove_beat(Beat beat, Track track, int result) {
    if (track->head == track->curr) {
        //If the first beat is the only beat that exists
        if (track->head->next == NULL) {
            track->head = NULL;
            track->curr = NULL;
            result = 1;
        } else {
            //Make the head pointer point to the next node in the list
            //after the selected beat 
            track->head = track->head->next;
            //Make the selected beat the next beat
            track->curr = track->head->next;
            result = 0;
        }
        return track->head;
    } else {
        //Declare and initialise a current and previous node starting
        //at the head
        Beat curr = beat;
        Beat prev = beat;
            //Loop through the list until the selected beat is reached
        while (curr != NULL && curr != track->curr) {
            prev = curr;
            curr = curr->next;
        }
        //If the selected beat is at the end of the list 
        if (curr->next == NULL) {
            prev->next = NULL;
            //Make it so that no beat is selected 
            track->curr = NULL;
            result = 1;
            //If the selected beat is not at the end of the list 
        } else {
            prev->next = curr->next;
            //Make the selected beat the next beat
            track->curr = curr->next;
            result = 0;
        }
        return curr;
    }
}
