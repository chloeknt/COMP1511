// Slide
// slide.c
//
// This program was written by Chloe Toh (z5362296)
// on 15/03/2021
//
// Version 1.0.0 (2021-03-08): Initial Assignment Release

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define SIZE 15
#define EMPTY 0
#define STONE 1
#define SPACES 225

//Function declaration
void print_map(int map[SIZE][SIZE], int laser_y);
void fire_laser(int map[SIZE][SIZE], int laser_y);
void shift_left(int map[SIZE][SIZE], int laser_y);
int shoot_end_condition(int map[SIZE][SIZE], int laser_y);
void rotate_map_clock(int map[SIZE][SIZE], int laser_y);
void rotate_map_anticlock(int map[SIZE][SIZE], int laser_y);

int main (void) {
    // This line creates our 2D array called "map" and sets all
    // of the blocks in the map to EMPTY.
    int map[SIZE][SIZE] = {EMPTY};
    // This line creates our laser_y variable. The laser starts in the
    // middle of the map, at position 7.
    int laser_y = SIZE / 2;

    //ASK FOR THE NUMBER OF BLOCKS AND CREATE LOOP FOR INPUTS 
    printf("How many blocks? ");
    //Scan the number of blocks 
    int blocks;
    scanf("%d", &blocks);
    //Variable for ONE
    int block_value = 0;
    //Create looping variable 
    int keep_looping = 0;
    //Ask for user input 
    printf("Enter blocks:\n");
    
    //Variables for position row and column 
    int pos_r = 0;
    int pos_c = 0;
    //While loop for position of blocks  
    while (keep_looping < blocks) {
        //Scan the user's input 
        scanf("%d %d %d", &pos_r, &pos_c, &block_value);
        //If the input is invalid, disregard it 
        if (0 > pos_r || pos_r > SIZE || 0 > pos_c || pos_c > SIZE) { 
        } else {
            //If it is valid, change the value at that position to the value 
            map[pos_r][pos_c] = block_value;
        }
        keep_looping++;
    }
    //Print the map to see the position of the blocks up to now 
    print_map(map, laser_y);
   
    //Declare and initialise variables for user input 
    int command_one = 0;
    int command_two = 0;
    //Declare and initialise a variable for the shifting end condition
    int last_try = 0;
    //Depending on scanned result, the program either continues or 
    //ends  
    while (keep_looping) {
        //Declare variables for the scans of user input 
        int result_1 = scanf ("%d", &command_one);
        //If the input is ctrl D, end the program
        if (result_1 == EOF) {
            break;
        //If the input is 2 (shooting command)
        } else if (command_one == 2) {
            //Commence fire_laser function
            fire_laser(map, laser_y);
            //Declare and initialise variable for adding up the total 
            //of empty spaces 
            int whole_array = shoot_end_condition(map, laser_y);
            //If the whole array is empty, ie. 225 0s
            if (whole_array == SPACES) {
                //Print the map one more time
                print_map(map, laser_y);
                //Print Game Won and exit the program
                printf("Game Won!\n");
                return 0;
            }
            //If the input is 3 and there has not been a block in the 
            //left most column previously 
        } else if (command_one == 3 && last_try == 0){
            //Commence the shift_left function 
            shift_left(map, laser_y);
            //Declare and initialise index variable 
            int i = 0;
            //While loop to check if the left-most column has any blocks 
            while (i < SIZE) {
                //If there are blocks, add to the last_try variable 
                if (map[i][0] != EMPTY) {
                    last_try++;
                }
                i++; 
            }
        //If the input is 3 and there has been a block in the left
        //-most column previously 
        } else if (command_one == 3 && last_try == 1){
            //Declare and initialise index variable
            int i = 0;
            //While loop to check if the left-most column has any blocks
            while (i < SIZE) {
                //If there are blocks, print the map,
                //indicate Game Lost and end the program
                if (map[i][0] != EMPTY) {
                    print_map(map, laser_y);
                    printf("Game Lost!\n");
                    return 0;
                }
                i++; 
            }
            //If the commands have two parts to them
        } else {
            //Declare and initilise a variable for the scan of the second input 
            int result_2 = scanf ("%d", &command_two);
            //If the input is ctrl D, exit the program
            if (result_2 != 1) {
                break;
                //If the inputs are 1 1 
            } else if (command_one == 1 && command_two == 1) {
                //Shift laser_y dowmwards once    
                laser_y++;
                //If the inputs are 1 -1
            } else if (command_one == 1 && command_two == -1) { 
                //Shift laser_y upwards once 
                laser_y--; 
                //If the inputs are 4 1 
            } else if (command_one == 4 && command_two == 1 && last_try == 0) {
                //Commence rotate_map_clock function
                rotate_map_clock(map, laser_y);
                last_try++;
                //If the inputs are 4 2
            } else if (command_one == 4 && command_two == 2 && last_try == 0) {
                //Commence rotate_map_anticlock function
                rotate_map_anticlock(map, laser_y);
                last_try++;
            } else if (command_one == 4) {
                last_try++;
            } else if (last_try == 1) {
            }
            //Check if the laser has gone off the map, if so remains 
            //unchanged 
            if (laser_y < 0) { 
                //Too far upwards 
                laser_y = 0; 
            } else if (laser_y >= SIZE) { 
                //Too far downwards  
                laser_y = SIZE - 1; 
            } 
        }
        //Print map to see current position 
        print_map(map, laser_y);
    }
    return 0;
}

//Function for firing the laser
void fire_laser(int map[SIZE][SIZE], int laser_y) {
    //Declare and initialise index variable 
    int index = 0;
    //Declare and initialise variable for maximum blocks destroyed at once
    int max_blocks = 0;
    int tnt_check = 1;
    //Loop through index in the position of laser_y
    while (index < SIZE && max_blocks < 4) {
        //If the value at the index is not 0
        //if (map[laser_y][index] != EMPTY) {
            //Destroying normal blocks
            //If the value of the first non 0 value at the index is 1
            if (map[laser_y][index] == 1) {
                //Four blocks consecutively that are 1 after 
                //are destroyed
                while (tnt_check < 5 && index + tnt_check < SIZE) {
                    if (map[laser_y][index + tnt_check] > 3 && 
                    map[laser_y][index + tnt_check] < 10) {
                        //Declare and initialise variable for the value of the 
                        //block and the position of the non 1 block
                        int tnt_radius; 
                        tnt_radius = map[laser_y][index + tnt_check];
                        int new_position = index + tnt_check;
                        //Declare and initialise variable for index variables 
                        int i = 0;
                        //While loop to check every value in the array
                        while (i < SIZE) {
                            int j = 0; 
                            while (j < SIZE) {
                            //Blocks within the euclidean distance of the block 
                            //value are destroyed (changed to 0)
                                if (tnt_radius > 
                                    sqrt(pow((j-new_position),2)+pow((i-laser_y),2))) {
                                    map[i][j] = EMPTY;
                                }
                                j++;
                            }
                            i++;
                        } 
                    } else {
                        tnt_check++; 
                    }
                }
                while (map[laser_y][index + max_blocks] == 1 && max_blocks < 4) {
                    map[laser_y][index + max_blocks] = EMPTY;
                    max_blocks++;
                }
            //Destroying TNT blocks (4-9)s
            //If the value at the first non 0 value at the index is 4-9
            } else if (map[laser_y][index] > 3 && map[laser_y][index] < 10) {
                //Declare and initialise variable for the value of the block 
                int tnt_radius; 
                tnt_radius = map[laser_y][index];
                //Declare and initialise variable for index variables 
                int i = 0;
                //While loop to check every value in the array
                while (i < SIZE) {
                    int j = 0; 
                    while (j < SIZE) {
                        //Blocks within the euclidean distance of the block 
                        //value are destroyed (changed to 0)
                        if (tnt_radius > 
                        sqrt(pow((j-index),2)+pow((i-laser_y),2))) {
                            map[i][j] = EMPTY;
                        }
                        j++;
                    }
                    i++;
                }   
            }
        //} 
        index++; 
    }
} 
    

//Function that will shift everything to the left
void shift_left(int map[SIZE][SIZE], int laser_y) {
    //Declare and initialise index variable
    int i = 0;
    //Declare variable for storing array value
    int saved;
    //Declare and initialise pointer for saved variable
    int *p = &saved;
    //While loop 
    while (i < SIZE) {
        int j = 0;
        while (j < SIZE) {
            *p = map[i][j];
            p = &map[i][j];
            j++;
        }
        i++;
    }
    *p = saved;
}

//Function that rotates map 90 degress clockwise
void rotate_map_clock(int map[SIZE][SIZE], int laser_y) {
    //First we transpose the elements 
    int temp;
    int i = 0;
    while (i < SIZE) {
        int j = 0;
        while (j < SIZE) {
            if(i < j) {
                temp = map[i][j]; 
                map[i][j] = map[j][i];
                map[j][i] = temp;
            }
            j++;
        }
        i++;
    }
    //Then we reverse the rows
    int row = 0;
    while (row < SIZE) {
        int col = 0;
        while (col < SIZE) {
            if (col < SIZE/2) {
                temp = map[row][col];
                map[row][col] = map[row][SIZE - col - 1]; 
                map[row][SIZE - col - 1] = temp;
            }
            col++;
        }
        row++;
    }
    
}

//Function that rotates map 90 degress anticlockwise
void rotate_map_anticlock(int map[SIZE][SIZE], int laser_y) {
    //First we reverse the rows 
    int temp;
    int row = 0;
    while (row < SIZE) {
        int col = 0;
        while (col < SIZE) {
            if (col < SIZE/2) {
                temp = map[row][col];
                map[row][col] = map[row][SIZE - col - 1]; 
                map[row][SIZE - col - 1] = temp;
            }
            col++;
        }
        row++;
    }
    //Then we transpose the elements
    int i = 0;
    while (i < SIZE) {
        int j = 0;
        while (j < SIZE) {
            if(i < j) {
                temp = map[i][j]; 
                map[i][j] = map[j][i];
                map[j][i] = temp;
            }
            j++;
        }
        i++;
    }  
}

//Check if the entire map is empty 
int shoot_end_condition(int map[SIZE][SIZE], int laser_y) {
    //Declare and initialise index variable 
    int i = 0;
    int whole_array = 0;
    //While loop for checking every value in the array 
    while (i < SIZE) {
        int j = 0;
        while (j < SIZE) {
            if (map[i][j] == EMPTY) {
            //If the value is 0, add to the variable whole_array
               whole_array++; 
            }
            j++;
        }
        i++;
    }
    return whole_array;
}

// Print out the contents of the map array. 
// Also print out a > symbol to denote the current laser position.
void print_map(int map[SIZE][SIZE], int laser_y) {
    int i = 0;
    while (i < SIZE) {
        if (i == laser_y) {
            printf("> ");
        } else {
            printf("  ");
        }
        int j = 0;
        while (j < SIZE) {
            printf("%d ", map[i][j]);
            j++;
        }
        printf("\n");
        i++;
    }
}

